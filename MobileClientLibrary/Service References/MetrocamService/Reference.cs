//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace ClientLibrary.MetrocamService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FavoritedPicture", Namespace="http://schemas.datacontract.org/2004/07/WebService")]
    public partial class FavoritedPicture : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime CreatedDateField;
        
        private ClientLibrary.MetrocamService.Picture PictureField;
        
        private System.Guid PictureIDField;
        
        private ClientLibrary.MetrocamService.User UserField;
        
        private System.Guid UserIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientLibrary.MetrocamService.Picture Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PictureID {
            get {
                return this.PictureIDField;
            }
            set {
                if ((this.PictureIDField.Equals(value) != true)) {
                    this.PictureIDField = value;
                    this.RaisePropertyChanged("PictureID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientLibrary.MetrocamService.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Picture", Namespace="http://schemas.datacontract.org/2004/07/WebService")]
    public partial class Picture : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CaptionField;
        
        private System.Nullable<System.DateTime> CreatedDateField;
        
        private System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FavoritedPicture> FavoritedPicturesField;
        
        private System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FlaggedPicture> FlaggedPicturesField;
        
        private string LargeURLField;
        
        private System.Nullable<decimal> LatitudeField;
        
        private System.Nullable<decimal> LongitudeField;
        
        private string MediumURLField;
        
        private System.Guid PictureIDField;
        
        private string SmallURLField;
        
        private ClientLibrary.MetrocamService.User UserField;
        
        private System.Guid UserIDField;
        
        private System.Nullable<int> ViewCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Caption {
            get {
                return this.CaptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CaptionField, value) != true)) {
                    this.CaptionField = value;
                    this.RaisePropertyChanged("Caption");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FavoritedPicture> FavoritedPictures {
            get {
                return this.FavoritedPicturesField;
            }
            set {
                if ((object.ReferenceEquals(this.FavoritedPicturesField, value) != true)) {
                    this.FavoritedPicturesField = value;
                    this.RaisePropertyChanged("FavoritedPictures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FlaggedPicture> FlaggedPictures {
            get {
                return this.FlaggedPicturesField;
            }
            set {
                if ((object.ReferenceEquals(this.FlaggedPicturesField, value) != true)) {
                    this.FlaggedPicturesField = value;
                    this.RaisePropertyChanged("FlaggedPictures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LargeURL {
            get {
                return this.LargeURLField;
            }
            set {
                if ((object.ReferenceEquals(this.LargeURLField, value) != true)) {
                    this.LargeURLField = value;
                    this.RaisePropertyChanged("LargeURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Latitude {
            get {
                return this.LatitudeField;
            }
            set {
                if ((this.LatitudeField.Equals(value) != true)) {
                    this.LatitudeField = value;
                    this.RaisePropertyChanged("Latitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<decimal> Longitude {
            get {
                return this.LongitudeField;
            }
            set {
                if ((this.LongitudeField.Equals(value) != true)) {
                    this.LongitudeField = value;
                    this.RaisePropertyChanged("Longitude");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MediumURL {
            get {
                return this.MediumURLField;
            }
            set {
                if ((object.ReferenceEquals(this.MediumURLField, value) != true)) {
                    this.MediumURLField = value;
                    this.RaisePropertyChanged("MediumURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PictureID {
            get {
                return this.PictureIDField;
            }
            set {
                if ((this.PictureIDField.Equals(value) != true)) {
                    this.PictureIDField = value;
                    this.RaisePropertyChanged("PictureID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SmallURL {
            get {
                return this.SmallURLField;
            }
            set {
                if ((object.ReferenceEquals(this.SmallURLField, value) != true)) {
                    this.SmallURLField = value;
                    this.RaisePropertyChanged("SmallURL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientLibrary.MetrocamService.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ViewCount {
            get {
                return this.ViewCountField;
            }
            set {
                if ((this.ViewCountField.Equals(value) != true)) {
                    this.ViewCountField = value;
                    this.RaisePropertyChanged("ViewCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/WebService")]
    public partial class User : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string BiographyField;
        
        private System.DateTime CreatedDateField;
        
        private string EmailAddressField;
        
        private System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FavoritedPicture> FavoritedPicturesField;
        
        private System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FlaggedPicture> FlaggedPicturesField;
        
        private string LocationField;
        
        private string NameField;
        
        private string PasswordField;
        
        private System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.Picture> PicturesField;
        
        private System.Nullable<System.Guid> ProfilePictureIDField;
        
        private System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.Relationship> RelationshipsField;
        
        private System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.Relationship> Relationships1Field;
        
        private System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.UserConnectedAccount> UserConnectedAccountsField;
        
        private System.Guid UserIDField;
        
        private string UsernameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Biography {
            get {
                return this.BiographyField;
            }
            set {
                if ((object.ReferenceEquals(this.BiographyField, value) != true)) {
                    this.BiographyField = value;
                    this.RaisePropertyChanged("Biography");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailAddress {
            get {
                return this.EmailAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailAddressField, value) != true)) {
                    this.EmailAddressField = value;
                    this.RaisePropertyChanged("EmailAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FavoritedPicture> FavoritedPictures {
            get {
                return this.FavoritedPicturesField;
            }
            set {
                if ((object.ReferenceEquals(this.FavoritedPicturesField, value) != true)) {
                    this.FavoritedPicturesField = value;
                    this.RaisePropertyChanged("FavoritedPictures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FlaggedPicture> FlaggedPictures {
            get {
                return this.FlaggedPicturesField;
            }
            set {
                if ((object.ReferenceEquals(this.FlaggedPicturesField, value) != true)) {
                    this.FlaggedPicturesField = value;
                    this.RaisePropertyChanged("FlaggedPictures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Location {
            get {
                return this.LocationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationField, value) != true)) {
                    this.LocationField = value;
                    this.RaisePropertyChanged("Location");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.Picture> Pictures {
            get {
                return this.PicturesField;
            }
            set {
                if ((object.ReferenceEquals(this.PicturesField, value) != true)) {
                    this.PicturesField = value;
                    this.RaisePropertyChanged("Pictures");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.Guid> ProfilePictureID {
            get {
                return this.ProfilePictureIDField;
            }
            set {
                if ((this.ProfilePictureIDField.Equals(value) != true)) {
                    this.ProfilePictureIDField = value;
                    this.RaisePropertyChanged("ProfilePictureID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.Relationship> Relationships {
            get {
                return this.RelationshipsField;
            }
            set {
                if ((object.ReferenceEquals(this.RelationshipsField, value) != true)) {
                    this.RelationshipsField = value;
                    this.RaisePropertyChanged("Relationships");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.Relationship> Relationships1 {
            get {
                return this.Relationships1Field;
            }
            set {
                if ((object.ReferenceEquals(this.Relationships1Field, value) != true)) {
                    this.Relationships1Field = value;
                    this.RaisePropertyChanged("Relationships1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.UserConnectedAccount> UserConnectedAccounts {
            get {
                return this.UserConnectedAccountsField;
            }
            set {
                if ((object.ReferenceEquals(this.UserConnectedAccountsField, value) != true)) {
                    this.UserConnectedAccountsField = value;
                    this.RaisePropertyChanged("UserConnectedAccounts");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FlaggedPicture", Namespace="http://schemas.datacontract.org/2004/07/WebService")]
    public partial class FlaggedPicture : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime CreatedDateField;
        
        private ClientLibrary.MetrocamService.Picture PictureField;
        
        private System.Guid PictureIDField;
        
        private ClientLibrary.MetrocamService.User UserField;
        
        private System.Guid UserIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientLibrary.MetrocamService.Picture Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid PictureID {
            get {
                return this.PictureIDField;
            }
            set {
                if ((this.PictureIDField.Equals(value) != true)) {
                    this.PictureIDField = value;
                    this.RaisePropertyChanged("PictureID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientLibrary.MetrocamService.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Relationship", Namespace="http://schemas.datacontract.org/2004/07/WebService")]
    public partial class Relationship : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime CreatedDateField;
        
        private System.Guid FollowingUserIDField;
        
        private ClientLibrary.MetrocamService.User UserField;
        
        private ClientLibrary.MetrocamService.User User1Field;
        
        private System.Guid UserIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid FollowingUserID {
            get {
                return this.FollowingUserIDField;
            }
            set {
                if ((this.FollowingUserIDField.Equals(value) != true)) {
                    this.FollowingUserIDField = value;
                    this.RaisePropertyChanged("FollowingUserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientLibrary.MetrocamService.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientLibrary.MetrocamService.User User1 {
            get {
                return this.User1Field;
            }
            set {
                if ((object.ReferenceEquals(this.User1Field, value) != true)) {
                    this.User1Field = value;
                    this.RaisePropertyChanged("User1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserConnectedAccount", Namespace="http://schemas.datacontract.org/2004/07/WebService")]
    public partial class UserConnectedAccount : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AccountNameField;
        
        private string ClientSecretField;
        
        private string ClientTokenField;
        
        private System.DateTime CreatedDateField;
        
        private ClientLibrary.MetrocamService.User UserField;
        
        private System.Guid UserIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountName {
            get {
                return this.AccountNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountNameField, value) != true)) {
                    this.AccountNameField = value;
                    this.RaisePropertyChanged("AccountName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientSecret {
            get {
                return this.ClientSecretField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientSecretField, value) != true)) {
                    this.ClientSecretField = value;
                    this.RaisePropertyChanged("ClientSecret");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientToken {
            get {
                return this.ClientTokenField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientTokenField, value) != true)) {
                    this.ClientTokenField = value;
                    this.RaisePropertyChanged("ClientToken");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ClientLibrary.MetrocamService.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Guid UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MetrocamService.Service")]
    public interface Service {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/CreateFavoritedPicture", ReplyAction="http://tempuri.org/Service/CreateFavoritedPictureResponse")]
        System.IAsyncResult BeginCreateFavoritedPicture(ClientLibrary.MetrocamService.FavoritedPicture data, System.AsyncCallback callback, object asyncState);
        
        void EndCreateFavoritedPicture(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/GetFavoritedPictures", ReplyAction="http://tempuri.org/Service/GetFavoritedPicturesResponse")]
        System.IAsyncResult BeginGetFavoritedPictures(System.Guid userId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FavoritedPicture> EndGetFavoritedPictures(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/DeleteFavoritedPicture", ReplyAction="http://tempuri.org/Service/DeleteFavoritedPictureResponse")]
        System.IAsyncResult BeginDeleteFavoritedPicture(System.Guid userId, System.Guid pictureId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteFavoritedPicture(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/CreateFlaggedPicture", ReplyAction="http://tempuri.org/Service/CreateFlaggedPictureResponse")]
        System.IAsyncResult BeginCreateFlaggedPicture(ClientLibrary.MetrocamService.FlaggedPicture data, System.AsyncCallback callback, object asyncState);
        
        void EndCreateFlaggedPicture(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/GetFlaggedPictures", ReplyAction="http://tempuri.org/Service/GetFlaggedPicturesResponse")]
        System.IAsyncResult BeginGetFlaggedPictures(System.Guid userId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FlaggedPicture> EndGetFlaggedPictures(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/DeleteFlaggedPicture", ReplyAction="http://tempuri.org/Service/DeleteFlaggedPictureResponse")]
        System.IAsyncResult BeginDeleteFlaggedPicture(System.Guid userId, System.Guid pictureId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteFlaggedPicture(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/CreatePicture", ReplyAction="http://tempuri.org/Service/CreatePictureResponse")]
        System.IAsyncResult BeginCreatePicture(ClientLibrary.MetrocamService.Picture data, System.AsyncCallback callback, object asyncState);
        
        void EndCreatePicture(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/GetPicture", ReplyAction="http://tempuri.org/Service/GetPictureResponse")]
        System.IAsyncResult BeginGetPicture(System.Guid id, System.AsyncCallback callback, object asyncState);
        
        ClientLibrary.MetrocamService.Picture EndGetPicture(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/UpdatePicture", ReplyAction="http://tempuri.org/Service/UpdatePictureResponse")]
        System.IAsyncResult BeginUpdatePicture(ClientLibrary.MetrocamService.Picture data, System.AsyncCallback callback, object asyncState);
        
        void EndUpdatePicture(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/DeletePicture", ReplyAction="http://tempuri.org/Service/DeletePictureResponse")]
        System.IAsyncResult BeginDeletePicture(System.Guid id, System.AsyncCallback callback, object asyncState);
        
        void EndDeletePicture(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/CreateRelationship", ReplyAction="http://tempuri.org/Service/CreateRelationshipResponse")]
        System.IAsyncResult BeginCreateRelationship(ClientLibrary.MetrocamService.Relationship data, System.AsyncCallback callback, object asyncState);
        
        void EndCreateRelationship(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/GetRelationships", ReplyAction="http://tempuri.org/Service/GetRelationshipsResponse")]
        System.IAsyncResult BeginGetRelationships(System.Guid userId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.Relationship> EndGetRelationships(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/DeleteRelationship", ReplyAction="http://tempuri.org/Service/DeleteRelationshipResponse")]
        System.IAsyncResult BeginDeleteRelationship(System.Guid userId, System.Guid followingUserId, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteRelationship(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/CreateUser", ReplyAction="http://tempuri.org/Service/CreateUserResponse")]
        System.IAsyncResult BeginCreateUser(ClientLibrary.MetrocamService.User data, System.AsyncCallback callback, object asyncState);
        
        void EndCreateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/GetUser", ReplyAction="http://tempuri.org/Service/GetUserResponse")]
        System.IAsyncResult BeginGetUser(System.Guid id, System.AsyncCallback callback, object asyncState);
        
        ClientLibrary.MetrocamService.User EndGetUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/UpdateUser", ReplyAction="http://tempuri.org/Service/UpdateUserResponse")]
        System.IAsyncResult BeginUpdateUser(ClientLibrary.MetrocamService.User data, System.AsyncCallback callback, object asyncState);
        
        void EndUpdateUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/DeleteUser", ReplyAction="http://tempuri.org/Service/DeleteUserResponse")]
        System.IAsyncResult BeginDeleteUser(System.Guid id, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/CreateUserConnectedAccount", ReplyAction="http://tempuri.org/Service/CreateUserConnectedAccountResponse")]
        System.IAsyncResult BeginCreateUserConnectedAccount(ClientLibrary.MetrocamService.UserConnectedAccount data, System.AsyncCallback callback, object asyncState);
        
        void EndCreateUserConnectedAccount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/GetUserConnectedAccounts", ReplyAction="http://tempuri.org/Service/GetUserConnectedAccountsResponse")]
        System.IAsyncResult BeginGetUserConnectedAccounts(System.Guid userId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.UserConnectedAccount> EndGetUserConnectedAccounts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/Service/DeleteUserConnectedAccount", ReplyAction="http://tempuri.org/Service/DeleteUserConnectedAccountResponse")]
        System.IAsyncResult BeginDeleteUserConnectedAccount(System.Guid userId, string accountName, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteUserConnectedAccount(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ServiceChannel : ClientLibrary.MetrocamService.Service, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFavoritedPicturesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFavoritedPicturesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FavoritedPicture> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FavoritedPicture>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFlaggedPicturesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFlaggedPicturesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FlaggedPicture> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FlaggedPicture>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetPictureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetPictureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ClientLibrary.MetrocamService.Picture Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ClientLibrary.MetrocamService.Picture)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRelationshipsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRelationshipsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.Relationship> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.Relationship>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ClientLibrary.MetrocamService.User Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ClientLibrary.MetrocamService.User)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserConnectedAccountsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserConnectedAccountsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.UserConnectedAccount> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.UserConnectedAccount>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<ClientLibrary.MetrocamService.Service>, ClientLibrary.MetrocamService.Service {
        
        private BeginOperationDelegate onBeginCreateFavoritedPictureDelegate;
        
        private EndOperationDelegate onEndCreateFavoritedPictureDelegate;
        
        private System.Threading.SendOrPostCallback onCreateFavoritedPictureCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFavoritedPicturesDelegate;
        
        private EndOperationDelegate onEndGetFavoritedPicturesDelegate;
        
        private System.Threading.SendOrPostCallback onGetFavoritedPicturesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFavoritedPictureDelegate;
        
        private EndOperationDelegate onEndDeleteFavoritedPictureDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFavoritedPictureCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateFlaggedPictureDelegate;
        
        private EndOperationDelegate onEndCreateFlaggedPictureDelegate;
        
        private System.Threading.SendOrPostCallback onCreateFlaggedPictureCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFlaggedPicturesDelegate;
        
        private EndOperationDelegate onEndGetFlaggedPicturesDelegate;
        
        private System.Threading.SendOrPostCallback onGetFlaggedPicturesCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteFlaggedPictureDelegate;
        
        private EndOperationDelegate onEndDeleteFlaggedPictureDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteFlaggedPictureCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreatePictureDelegate;
        
        private EndOperationDelegate onEndCreatePictureDelegate;
        
        private System.Threading.SendOrPostCallback onCreatePictureCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetPictureDelegate;
        
        private EndOperationDelegate onEndGetPictureDelegate;
        
        private System.Threading.SendOrPostCallback onGetPictureCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdatePictureDelegate;
        
        private EndOperationDelegate onEndUpdatePictureDelegate;
        
        private System.Threading.SendOrPostCallback onUpdatePictureCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeletePictureDelegate;
        
        private EndOperationDelegate onEndDeletePictureDelegate;
        
        private System.Threading.SendOrPostCallback onDeletePictureCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateRelationshipDelegate;
        
        private EndOperationDelegate onEndCreateRelationshipDelegate;
        
        private System.Threading.SendOrPostCallback onCreateRelationshipCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRelationshipsDelegate;
        
        private EndOperationDelegate onEndGetRelationshipsDelegate;
        
        private System.Threading.SendOrPostCallback onGetRelationshipsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteRelationshipDelegate;
        
        private EndOperationDelegate onEndDeleteRelationshipDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteRelationshipCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateUserDelegate;
        
        private EndOperationDelegate onEndCreateUserDelegate;
        
        private System.Threading.SendOrPostCallback onCreateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserDelegate;
        
        private EndOperationDelegate onEndGetUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateUserDelegate;
        
        private EndOperationDelegate onEndUpdateUserDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserDelegate;
        
        private EndOperationDelegate onEndDeleteUserDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateUserConnectedAccountDelegate;
        
        private EndOperationDelegate onEndCreateUserConnectedAccountDelegate;
        
        private System.Threading.SendOrPostCallback onCreateUserConnectedAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserConnectedAccountsDelegate;
        
        private EndOperationDelegate onEndGetUserConnectedAccountsDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserConnectedAccountsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserConnectedAccountDelegate;
        
        private EndOperationDelegate onEndDeleteUserConnectedAccountDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserConnectedAccountCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateFavoritedPictureCompleted;
        
        public event System.EventHandler<GetFavoritedPicturesCompletedEventArgs> GetFavoritedPicturesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteFavoritedPictureCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateFlaggedPictureCompleted;
        
        public event System.EventHandler<GetFlaggedPicturesCompletedEventArgs> GetFlaggedPicturesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteFlaggedPictureCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreatePictureCompleted;
        
        public event System.EventHandler<GetPictureCompletedEventArgs> GetPictureCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdatePictureCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeletePictureCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateRelationshipCompleted;
        
        public event System.EventHandler<GetRelationshipsCompletedEventArgs> GetRelationshipsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteRelationshipCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateUserCompleted;
        
        public event System.EventHandler<GetUserCompletedEventArgs> GetUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> UpdateUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteUserCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CreateUserConnectedAccountCompleted;
        
        public event System.EventHandler<GetUserConnectedAccountsCompletedEventArgs> GetUserConnectedAccountsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DeleteUserConnectedAccountCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginCreateFavoritedPicture(ClientLibrary.MetrocamService.FavoritedPicture data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateFavoritedPicture(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientLibrary.MetrocamService.Service.EndCreateFavoritedPicture(System.IAsyncResult result) {
            base.Channel.EndCreateFavoritedPicture(result);
        }
        
        private System.IAsyncResult OnBeginCreateFavoritedPicture(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ClientLibrary.MetrocamService.FavoritedPicture data = ((ClientLibrary.MetrocamService.FavoritedPicture)(inValues[0]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginCreateFavoritedPicture(data, callback, asyncState);
        }
        
        private object[] OnEndCreateFavoritedPicture(System.IAsyncResult result) {
            ((ClientLibrary.MetrocamService.Service)(this)).EndCreateFavoritedPicture(result);
            return null;
        }
        
        private void OnCreateFavoritedPictureCompleted(object state) {
            if ((this.CreateFavoritedPictureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateFavoritedPictureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateFavoritedPictureAsync(ClientLibrary.MetrocamService.FavoritedPicture data) {
            this.CreateFavoritedPictureAsync(data, null);
        }
        
        public void CreateFavoritedPictureAsync(ClientLibrary.MetrocamService.FavoritedPicture data, object userState) {
            if ((this.onBeginCreateFavoritedPictureDelegate == null)) {
                this.onBeginCreateFavoritedPictureDelegate = new BeginOperationDelegate(this.OnBeginCreateFavoritedPicture);
            }
            if ((this.onEndCreateFavoritedPictureDelegate == null)) {
                this.onEndCreateFavoritedPictureDelegate = new EndOperationDelegate(this.OnEndCreateFavoritedPicture);
            }
            if ((this.onCreateFavoritedPictureCompletedDelegate == null)) {
                this.onCreateFavoritedPictureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateFavoritedPictureCompleted);
            }
            base.InvokeAsync(this.onBeginCreateFavoritedPictureDelegate, new object[] {
                        data}, this.onEndCreateFavoritedPictureDelegate, this.onCreateFavoritedPictureCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginGetFavoritedPictures(System.Guid userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFavoritedPictures(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FavoritedPicture> ClientLibrary.MetrocamService.Service.EndGetFavoritedPictures(System.IAsyncResult result) {
            return base.Channel.EndGetFavoritedPictures(result);
        }
        
        private System.IAsyncResult OnBeginGetFavoritedPictures(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginGetFavoritedPictures(userId, callback, asyncState);
        }
        
        private object[] OnEndGetFavoritedPictures(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FavoritedPicture> retVal = ((ClientLibrary.MetrocamService.Service)(this)).EndGetFavoritedPictures(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFavoritedPicturesCompleted(object state) {
            if ((this.GetFavoritedPicturesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFavoritedPicturesCompleted(this, new GetFavoritedPicturesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFavoritedPicturesAsync(System.Guid userId) {
            this.GetFavoritedPicturesAsync(userId, null);
        }
        
        public void GetFavoritedPicturesAsync(System.Guid userId, object userState) {
            if ((this.onBeginGetFavoritedPicturesDelegate == null)) {
                this.onBeginGetFavoritedPicturesDelegate = new BeginOperationDelegate(this.OnBeginGetFavoritedPictures);
            }
            if ((this.onEndGetFavoritedPicturesDelegate == null)) {
                this.onEndGetFavoritedPicturesDelegate = new EndOperationDelegate(this.OnEndGetFavoritedPictures);
            }
            if ((this.onGetFavoritedPicturesCompletedDelegate == null)) {
                this.onGetFavoritedPicturesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFavoritedPicturesCompleted);
            }
            base.InvokeAsync(this.onBeginGetFavoritedPicturesDelegate, new object[] {
                        userId}, this.onEndGetFavoritedPicturesDelegate, this.onGetFavoritedPicturesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginDeleteFavoritedPicture(System.Guid userId, System.Guid pictureId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFavoritedPicture(userId, pictureId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientLibrary.MetrocamService.Service.EndDeleteFavoritedPicture(System.IAsyncResult result) {
            base.Channel.EndDeleteFavoritedPicture(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFavoritedPicture(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            System.Guid pictureId = ((System.Guid)(inValues[1]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginDeleteFavoritedPicture(userId, pictureId, callback, asyncState);
        }
        
        private object[] OnEndDeleteFavoritedPicture(System.IAsyncResult result) {
            ((ClientLibrary.MetrocamService.Service)(this)).EndDeleteFavoritedPicture(result);
            return null;
        }
        
        private void OnDeleteFavoritedPictureCompleted(object state) {
            if ((this.DeleteFavoritedPictureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFavoritedPictureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFavoritedPictureAsync(System.Guid userId, System.Guid pictureId) {
            this.DeleteFavoritedPictureAsync(userId, pictureId, null);
        }
        
        public void DeleteFavoritedPictureAsync(System.Guid userId, System.Guid pictureId, object userState) {
            if ((this.onBeginDeleteFavoritedPictureDelegate == null)) {
                this.onBeginDeleteFavoritedPictureDelegate = new BeginOperationDelegate(this.OnBeginDeleteFavoritedPicture);
            }
            if ((this.onEndDeleteFavoritedPictureDelegate == null)) {
                this.onEndDeleteFavoritedPictureDelegate = new EndOperationDelegate(this.OnEndDeleteFavoritedPicture);
            }
            if ((this.onDeleteFavoritedPictureCompletedDelegate == null)) {
                this.onDeleteFavoritedPictureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFavoritedPictureCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFavoritedPictureDelegate, new object[] {
                        userId,
                        pictureId}, this.onEndDeleteFavoritedPictureDelegate, this.onDeleteFavoritedPictureCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginCreateFlaggedPicture(ClientLibrary.MetrocamService.FlaggedPicture data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateFlaggedPicture(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientLibrary.MetrocamService.Service.EndCreateFlaggedPicture(System.IAsyncResult result) {
            base.Channel.EndCreateFlaggedPicture(result);
        }
        
        private System.IAsyncResult OnBeginCreateFlaggedPicture(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ClientLibrary.MetrocamService.FlaggedPicture data = ((ClientLibrary.MetrocamService.FlaggedPicture)(inValues[0]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginCreateFlaggedPicture(data, callback, asyncState);
        }
        
        private object[] OnEndCreateFlaggedPicture(System.IAsyncResult result) {
            ((ClientLibrary.MetrocamService.Service)(this)).EndCreateFlaggedPicture(result);
            return null;
        }
        
        private void OnCreateFlaggedPictureCompleted(object state) {
            if ((this.CreateFlaggedPictureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateFlaggedPictureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateFlaggedPictureAsync(ClientLibrary.MetrocamService.FlaggedPicture data) {
            this.CreateFlaggedPictureAsync(data, null);
        }
        
        public void CreateFlaggedPictureAsync(ClientLibrary.MetrocamService.FlaggedPicture data, object userState) {
            if ((this.onBeginCreateFlaggedPictureDelegate == null)) {
                this.onBeginCreateFlaggedPictureDelegate = new BeginOperationDelegate(this.OnBeginCreateFlaggedPicture);
            }
            if ((this.onEndCreateFlaggedPictureDelegate == null)) {
                this.onEndCreateFlaggedPictureDelegate = new EndOperationDelegate(this.OnEndCreateFlaggedPicture);
            }
            if ((this.onCreateFlaggedPictureCompletedDelegate == null)) {
                this.onCreateFlaggedPictureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateFlaggedPictureCompleted);
            }
            base.InvokeAsync(this.onBeginCreateFlaggedPictureDelegate, new object[] {
                        data}, this.onEndCreateFlaggedPictureDelegate, this.onCreateFlaggedPictureCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginGetFlaggedPictures(System.Guid userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFlaggedPictures(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FlaggedPicture> ClientLibrary.MetrocamService.Service.EndGetFlaggedPictures(System.IAsyncResult result) {
            return base.Channel.EndGetFlaggedPictures(result);
        }
        
        private System.IAsyncResult OnBeginGetFlaggedPictures(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginGetFlaggedPictures(userId, callback, asyncState);
        }
        
        private object[] OnEndGetFlaggedPictures(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FlaggedPicture> retVal = ((ClientLibrary.MetrocamService.Service)(this)).EndGetFlaggedPictures(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFlaggedPicturesCompleted(object state) {
            if ((this.GetFlaggedPicturesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFlaggedPicturesCompleted(this, new GetFlaggedPicturesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFlaggedPicturesAsync(System.Guid userId) {
            this.GetFlaggedPicturesAsync(userId, null);
        }
        
        public void GetFlaggedPicturesAsync(System.Guid userId, object userState) {
            if ((this.onBeginGetFlaggedPicturesDelegate == null)) {
                this.onBeginGetFlaggedPicturesDelegate = new BeginOperationDelegate(this.OnBeginGetFlaggedPictures);
            }
            if ((this.onEndGetFlaggedPicturesDelegate == null)) {
                this.onEndGetFlaggedPicturesDelegate = new EndOperationDelegate(this.OnEndGetFlaggedPictures);
            }
            if ((this.onGetFlaggedPicturesCompletedDelegate == null)) {
                this.onGetFlaggedPicturesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFlaggedPicturesCompleted);
            }
            base.InvokeAsync(this.onBeginGetFlaggedPicturesDelegate, new object[] {
                        userId}, this.onEndGetFlaggedPicturesDelegate, this.onGetFlaggedPicturesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginDeleteFlaggedPicture(System.Guid userId, System.Guid pictureId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteFlaggedPicture(userId, pictureId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientLibrary.MetrocamService.Service.EndDeleteFlaggedPicture(System.IAsyncResult result) {
            base.Channel.EndDeleteFlaggedPicture(result);
        }
        
        private System.IAsyncResult OnBeginDeleteFlaggedPicture(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            System.Guid pictureId = ((System.Guid)(inValues[1]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginDeleteFlaggedPicture(userId, pictureId, callback, asyncState);
        }
        
        private object[] OnEndDeleteFlaggedPicture(System.IAsyncResult result) {
            ((ClientLibrary.MetrocamService.Service)(this)).EndDeleteFlaggedPicture(result);
            return null;
        }
        
        private void OnDeleteFlaggedPictureCompleted(object state) {
            if ((this.DeleteFlaggedPictureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteFlaggedPictureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteFlaggedPictureAsync(System.Guid userId, System.Guid pictureId) {
            this.DeleteFlaggedPictureAsync(userId, pictureId, null);
        }
        
        public void DeleteFlaggedPictureAsync(System.Guid userId, System.Guid pictureId, object userState) {
            if ((this.onBeginDeleteFlaggedPictureDelegate == null)) {
                this.onBeginDeleteFlaggedPictureDelegate = new BeginOperationDelegate(this.OnBeginDeleteFlaggedPicture);
            }
            if ((this.onEndDeleteFlaggedPictureDelegate == null)) {
                this.onEndDeleteFlaggedPictureDelegate = new EndOperationDelegate(this.OnEndDeleteFlaggedPicture);
            }
            if ((this.onDeleteFlaggedPictureCompletedDelegate == null)) {
                this.onDeleteFlaggedPictureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteFlaggedPictureCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteFlaggedPictureDelegate, new object[] {
                        userId,
                        pictureId}, this.onEndDeleteFlaggedPictureDelegate, this.onDeleteFlaggedPictureCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginCreatePicture(ClientLibrary.MetrocamService.Picture data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreatePicture(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientLibrary.MetrocamService.Service.EndCreatePicture(System.IAsyncResult result) {
            base.Channel.EndCreatePicture(result);
        }
        
        private System.IAsyncResult OnBeginCreatePicture(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ClientLibrary.MetrocamService.Picture data = ((ClientLibrary.MetrocamService.Picture)(inValues[0]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginCreatePicture(data, callback, asyncState);
        }
        
        private object[] OnEndCreatePicture(System.IAsyncResult result) {
            ((ClientLibrary.MetrocamService.Service)(this)).EndCreatePicture(result);
            return null;
        }
        
        private void OnCreatePictureCompleted(object state) {
            if ((this.CreatePictureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreatePictureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreatePictureAsync(ClientLibrary.MetrocamService.Picture data) {
            this.CreatePictureAsync(data, null);
        }
        
        public void CreatePictureAsync(ClientLibrary.MetrocamService.Picture data, object userState) {
            if ((this.onBeginCreatePictureDelegate == null)) {
                this.onBeginCreatePictureDelegate = new BeginOperationDelegate(this.OnBeginCreatePicture);
            }
            if ((this.onEndCreatePictureDelegate == null)) {
                this.onEndCreatePictureDelegate = new EndOperationDelegate(this.OnEndCreatePicture);
            }
            if ((this.onCreatePictureCompletedDelegate == null)) {
                this.onCreatePictureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreatePictureCompleted);
            }
            base.InvokeAsync(this.onBeginCreatePictureDelegate, new object[] {
                        data}, this.onEndCreatePictureDelegate, this.onCreatePictureCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginGetPicture(System.Guid id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetPicture(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ClientLibrary.MetrocamService.Picture ClientLibrary.MetrocamService.Service.EndGetPicture(System.IAsyncResult result) {
            return base.Channel.EndGetPicture(result);
        }
        
        private System.IAsyncResult OnBeginGetPicture(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginGetPicture(id, callback, asyncState);
        }
        
        private object[] OnEndGetPicture(System.IAsyncResult result) {
            ClientLibrary.MetrocamService.Picture retVal = ((ClientLibrary.MetrocamService.Service)(this)).EndGetPicture(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetPictureCompleted(object state) {
            if ((this.GetPictureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetPictureCompleted(this, new GetPictureCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetPictureAsync(System.Guid id) {
            this.GetPictureAsync(id, null);
        }
        
        public void GetPictureAsync(System.Guid id, object userState) {
            if ((this.onBeginGetPictureDelegate == null)) {
                this.onBeginGetPictureDelegate = new BeginOperationDelegate(this.OnBeginGetPicture);
            }
            if ((this.onEndGetPictureDelegate == null)) {
                this.onEndGetPictureDelegate = new EndOperationDelegate(this.OnEndGetPicture);
            }
            if ((this.onGetPictureCompletedDelegate == null)) {
                this.onGetPictureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetPictureCompleted);
            }
            base.InvokeAsync(this.onBeginGetPictureDelegate, new object[] {
                        id}, this.onEndGetPictureDelegate, this.onGetPictureCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginUpdatePicture(ClientLibrary.MetrocamService.Picture data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdatePicture(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientLibrary.MetrocamService.Service.EndUpdatePicture(System.IAsyncResult result) {
            base.Channel.EndUpdatePicture(result);
        }
        
        private System.IAsyncResult OnBeginUpdatePicture(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ClientLibrary.MetrocamService.Picture data = ((ClientLibrary.MetrocamService.Picture)(inValues[0]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginUpdatePicture(data, callback, asyncState);
        }
        
        private object[] OnEndUpdatePicture(System.IAsyncResult result) {
            ((ClientLibrary.MetrocamService.Service)(this)).EndUpdatePicture(result);
            return null;
        }
        
        private void OnUpdatePictureCompleted(object state) {
            if ((this.UpdatePictureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdatePictureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdatePictureAsync(ClientLibrary.MetrocamService.Picture data) {
            this.UpdatePictureAsync(data, null);
        }
        
        public void UpdatePictureAsync(ClientLibrary.MetrocamService.Picture data, object userState) {
            if ((this.onBeginUpdatePictureDelegate == null)) {
                this.onBeginUpdatePictureDelegate = new BeginOperationDelegate(this.OnBeginUpdatePicture);
            }
            if ((this.onEndUpdatePictureDelegate == null)) {
                this.onEndUpdatePictureDelegate = new EndOperationDelegate(this.OnEndUpdatePicture);
            }
            if ((this.onUpdatePictureCompletedDelegate == null)) {
                this.onUpdatePictureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdatePictureCompleted);
            }
            base.InvokeAsync(this.onBeginUpdatePictureDelegate, new object[] {
                        data}, this.onEndUpdatePictureDelegate, this.onUpdatePictureCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginDeletePicture(System.Guid id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeletePicture(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientLibrary.MetrocamService.Service.EndDeletePicture(System.IAsyncResult result) {
            base.Channel.EndDeletePicture(result);
        }
        
        private System.IAsyncResult OnBeginDeletePicture(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginDeletePicture(id, callback, asyncState);
        }
        
        private object[] OnEndDeletePicture(System.IAsyncResult result) {
            ((ClientLibrary.MetrocamService.Service)(this)).EndDeletePicture(result);
            return null;
        }
        
        private void OnDeletePictureCompleted(object state) {
            if ((this.DeletePictureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeletePictureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeletePictureAsync(System.Guid id) {
            this.DeletePictureAsync(id, null);
        }
        
        public void DeletePictureAsync(System.Guid id, object userState) {
            if ((this.onBeginDeletePictureDelegate == null)) {
                this.onBeginDeletePictureDelegate = new BeginOperationDelegate(this.OnBeginDeletePicture);
            }
            if ((this.onEndDeletePictureDelegate == null)) {
                this.onEndDeletePictureDelegate = new EndOperationDelegate(this.OnEndDeletePicture);
            }
            if ((this.onDeletePictureCompletedDelegate == null)) {
                this.onDeletePictureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeletePictureCompleted);
            }
            base.InvokeAsync(this.onBeginDeletePictureDelegate, new object[] {
                        id}, this.onEndDeletePictureDelegate, this.onDeletePictureCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginCreateRelationship(ClientLibrary.MetrocamService.Relationship data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateRelationship(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientLibrary.MetrocamService.Service.EndCreateRelationship(System.IAsyncResult result) {
            base.Channel.EndCreateRelationship(result);
        }
        
        private System.IAsyncResult OnBeginCreateRelationship(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ClientLibrary.MetrocamService.Relationship data = ((ClientLibrary.MetrocamService.Relationship)(inValues[0]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginCreateRelationship(data, callback, asyncState);
        }
        
        private object[] OnEndCreateRelationship(System.IAsyncResult result) {
            ((ClientLibrary.MetrocamService.Service)(this)).EndCreateRelationship(result);
            return null;
        }
        
        private void OnCreateRelationshipCompleted(object state) {
            if ((this.CreateRelationshipCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateRelationshipCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateRelationshipAsync(ClientLibrary.MetrocamService.Relationship data) {
            this.CreateRelationshipAsync(data, null);
        }
        
        public void CreateRelationshipAsync(ClientLibrary.MetrocamService.Relationship data, object userState) {
            if ((this.onBeginCreateRelationshipDelegate == null)) {
                this.onBeginCreateRelationshipDelegate = new BeginOperationDelegate(this.OnBeginCreateRelationship);
            }
            if ((this.onEndCreateRelationshipDelegate == null)) {
                this.onEndCreateRelationshipDelegate = new EndOperationDelegate(this.OnEndCreateRelationship);
            }
            if ((this.onCreateRelationshipCompletedDelegate == null)) {
                this.onCreateRelationshipCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateRelationshipCompleted);
            }
            base.InvokeAsync(this.onBeginCreateRelationshipDelegate, new object[] {
                        data}, this.onEndCreateRelationshipDelegate, this.onCreateRelationshipCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginGetRelationships(System.Guid userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRelationships(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.Relationship> ClientLibrary.MetrocamService.Service.EndGetRelationships(System.IAsyncResult result) {
            return base.Channel.EndGetRelationships(result);
        }
        
        private System.IAsyncResult OnBeginGetRelationships(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginGetRelationships(userId, callback, asyncState);
        }
        
        private object[] OnEndGetRelationships(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.Relationship> retVal = ((ClientLibrary.MetrocamService.Service)(this)).EndGetRelationships(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRelationshipsCompleted(object state) {
            if ((this.GetRelationshipsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRelationshipsCompleted(this, new GetRelationshipsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRelationshipsAsync(System.Guid userId) {
            this.GetRelationshipsAsync(userId, null);
        }
        
        public void GetRelationshipsAsync(System.Guid userId, object userState) {
            if ((this.onBeginGetRelationshipsDelegate == null)) {
                this.onBeginGetRelationshipsDelegate = new BeginOperationDelegate(this.OnBeginGetRelationships);
            }
            if ((this.onEndGetRelationshipsDelegate == null)) {
                this.onEndGetRelationshipsDelegate = new EndOperationDelegate(this.OnEndGetRelationships);
            }
            if ((this.onGetRelationshipsCompletedDelegate == null)) {
                this.onGetRelationshipsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRelationshipsCompleted);
            }
            base.InvokeAsync(this.onBeginGetRelationshipsDelegate, new object[] {
                        userId}, this.onEndGetRelationshipsDelegate, this.onGetRelationshipsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginDeleteRelationship(System.Guid userId, System.Guid followingUserId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteRelationship(userId, followingUserId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientLibrary.MetrocamService.Service.EndDeleteRelationship(System.IAsyncResult result) {
            base.Channel.EndDeleteRelationship(result);
        }
        
        private System.IAsyncResult OnBeginDeleteRelationship(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            System.Guid followingUserId = ((System.Guid)(inValues[1]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginDeleteRelationship(userId, followingUserId, callback, asyncState);
        }
        
        private object[] OnEndDeleteRelationship(System.IAsyncResult result) {
            ((ClientLibrary.MetrocamService.Service)(this)).EndDeleteRelationship(result);
            return null;
        }
        
        private void OnDeleteRelationshipCompleted(object state) {
            if ((this.DeleteRelationshipCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteRelationshipCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteRelationshipAsync(System.Guid userId, System.Guid followingUserId) {
            this.DeleteRelationshipAsync(userId, followingUserId, null);
        }
        
        public void DeleteRelationshipAsync(System.Guid userId, System.Guid followingUserId, object userState) {
            if ((this.onBeginDeleteRelationshipDelegate == null)) {
                this.onBeginDeleteRelationshipDelegate = new BeginOperationDelegate(this.OnBeginDeleteRelationship);
            }
            if ((this.onEndDeleteRelationshipDelegate == null)) {
                this.onEndDeleteRelationshipDelegate = new EndOperationDelegate(this.OnEndDeleteRelationship);
            }
            if ((this.onDeleteRelationshipCompletedDelegate == null)) {
                this.onDeleteRelationshipCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteRelationshipCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteRelationshipDelegate, new object[] {
                        userId,
                        followingUserId}, this.onEndDeleteRelationshipDelegate, this.onDeleteRelationshipCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginCreateUser(ClientLibrary.MetrocamService.User data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateUser(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientLibrary.MetrocamService.Service.EndCreateUser(System.IAsyncResult result) {
            base.Channel.EndCreateUser(result);
        }
        
        private System.IAsyncResult OnBeginCreateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ClientLibrary.MetrocamService.User data = ((ClientLibrary.MetrocamService.User)(inValues[0]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginCreateUser(data, callback, asyncState);
        }
        
        private object[] OnEndCreateUser(System.IAsyncResult result) {
            ((ClientLibrary.MetrocamService.Service)(this)).EndCreateUser(result);
            return null;
        }
        
        private void OnCreateUserCompleted(object state) {
            if ((this.CreateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateUserAsync(ClientLibrary.MetrocamService.User data) {
            this.CreateUserAsync(data, null);
        }
        
        public void CreateUserAsync(ClientLibrary.MetrocamService.User data, object userState) {
            if ((this.onBeginCreateUserDelegate == null)) {
                this.onBeginCreateUserDelegate = new BeginOperationDelegate(this.OnBeginCreateUser);
            }
            if ((this.onEndCreateUserDelegate == null)) {
                this.onEndCreateUserDelegate = new EndOperationDelegate(this.OnEndCreateUser);
            }
            if ((this.onCreateUserCompletedDelegate == null)) {
                this.onCreateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateUserCompleted);
            }
            base.InvokeAsync(this.onBeginCreateUserDelegate, new object[] {
                        data}, this.onEndCreateUserDelegate, this.onCreateUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginGetUser(System.Guid id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUser(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        ClientLibrary.MetrocamService.User ClientLibrary.MetrocamService.Service.EndGetUser(System.IAsyncResult result) {
            return base.Channel.EndGetUser(result);
        }
        
        private System.IAsyncResult OnBeginGetUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginGetUser(id, callback, asyncState);
        }
        
        private object[] OnEndGetUser(System.IAsyncResult result) {
            ClientLibrary.MetrocamService.User retVal = ((ClientLibrary.MetrocamService.Service)(this)).EndGetUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserCompleted(object state) {
            if ((this.GetUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserCompleted(this, new GetUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserAsync(System.Guid id) {
            this.GetUserAsync(id, null);
        }
        
        public void GetUserAsync(System.Guid id, object userState) {
            if ((this.onBeginGetUserDelegate == null)) {
                this.onBeginGetUserDelegate = new BeginOperationDelegate(this.OnBeginGetUser);
            }
            if ((this.onEndGetUserDelegate == null)) {
                this.onEndGetUserDelegate = new EndOperationDelegate(this.OnEndGetUser);
            }
            if ((this.onGetUserCompletedDelegate == null)) {
                this.onGetUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserDelegate, new object[] {
                        id}, this.onEndGetUserDelegate, this.onGetUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginUpdateUser(ClientLibrary.MetrocamService.User data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateUser(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientLibrary.MetrocamService.Service.EndUpdateUser(System.IAsyncResult result) {
            base.Channel.EndUpdateUser(result);
        }
        
        private System.IAsyncResult OnBeginUpdateUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ClientLibrary.MetrocamService.User data = ((ClientLibrary.MetrocamService.User)(inValues[0]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginUpdateUser(data, callback, asyncState);
        }
        
        private object[] OnEndUpdateUser(System.IAsyncResult result) {
            ((ClientLibrary.MetrocamService.Service)(this)).EndUpdateUser(result);
            return null;
        }
        
        private void OnUpdateUserCompleted(object state) {
            if ((this.UpdateUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateUserAsync(ClientLibrary.MetrocamService.User data) {
            this.UpdateUserAsync(data, null);
        }
        
        public void UpdateUserAsync(ClientLibrary.MetrocamService.User data, object userState) {
            if ((this.onBeginUpdateUserDelegate == null)) {
                this.onBeginUpdateUserDelegate = new BeginOperationDelegate(this.OnBeginUpdateUser);
            }
            if ((this.onEndUpdateUserDelegate == null)) {
                this.onEndUpdateUserDelegate = new EndOperationDelegate(this.OnEndUpdateUser);
            }
            if ((this.onUpdateUserCompletedDelegate == null)) {
                this.onUpdateUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateUserCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateUserDelegate, new object[] {
                        data}, this.onEndUpdateUserDelegate, this.onUpdateUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginDeleteUser(System.Guid id, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUser(id, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientLibrary.MetrocamService.Service.EndDeleteUser(System.IAsyncResult result) {
            base.Channel.EndDeleteUser(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid id = ((System.Guid)(inValues[0]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginDeleteUser(id, callback, asyncState);
        }
        
        private object[] OnEndDeleteUser(System.IAsyncResult result) {
            ((ClientLibrary.MetrocamService.Service)(this)).EndDeleteUser(result);
            return null;
        }
        
        private void OnDeleteUserCompleted(object state) {
            if ((this.DeleteUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserAsync(System.Guid id) {
            this.DeleteUserAsync(id, null);
        }
        
        public void DeleteUserAsync(System.Guid id, object userState) {
            if ((this.onBeginDeleteUserDelegate == null)) {
                this.onBeginDeleteUserDelegate = new BeginOperationDelegate(this.OnBeginDeleteUser);
            }
            if ((this.onEndDeleteUserDelegate == null)) {
                this.onEndDeleteUserDelegate = new EndOperationDelegate(this.OnEndDeleteUser);
            }
            if ((this.onDeleteUserCompletedDelegate == null)) {
                this.onDeleteUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserDelegate, new object[] {
                        id}, this.onEndDeleteUserDelegate, this.onDeleteUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginCreateUserConnectedAccount(ClientLibrary.MetrocamService.UserConnectedAccount data, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateUserConnectedAccount(data, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientLibrary.MetrocamService.Service.EndCreateUserConnectedAccount(System.IAsyncResult result) {
            base.Channel.EndCreateUserConnectedAccount(result);
        }
        
        private System.IAsyncResult OnBeginCreateUserConnectedAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            ClientLibrary.MetrocamService.UserConnectedAccount data = ((ClientLibrary.MetrocamService.UserConnectedAccount)(inValues[0]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginCreateUserConnectedAccount(data, callback, asyncState);
        }
        
        private object[] OnEndCreateUserConnectedAccount(System.IAsyncResult result) {
            ((ClientLibrary.MetrocamService.Service)(this)).EndCreateUserConnectedAccount(result);
            return null;
        }
        
        private void OnCreateUserConnectedAccountCompleted(object state) {
            if ((this.CreateUserConnectedAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateUserConnectedAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateUserConnectedAccountAsync(ClientLibrary.MetrocamService.UserConnectedAccount data) {
            this.CreateUserConnectedAccountAsync(data, null);
        }
        
        public void CreateUserConnectedAccountAsync(ClientLibrary.MetrocamService.UserConnectedAccount data, object userState) {
            if ((this.onBeginCreateUserConnectedAccountDelegate == null)) {
                this.onBeginCreateUserConnectedAccountDelegate = new BeginOperationDelegate(this.OnBeginCreateUserConnectedAccount);
            }
            if ((this.onEndCreateUserConnectedAccountDelegate == null)) {
                this.onEndCreateUserConnectedAccountDelegate = new EndOperationDelegate(this.OnEndCreateUserConnectedAccount);
            }
            if ((this.onCreateUserConnectedAccountCompletedDelegate == null)) {
                this.onCreateUserConnectedAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateUserConnectedAccountCompleted);
            }
            base.InvokeAsync(this.onBeginCreateUserConnectedAccountDelegate, new object[] {
                        data}, this.onEndCreateUserConnectedAccountDelegate, this.onCreateUserConnectedAccountCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginGetUserConnectedAccounts(System.Guid userId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserConnectedAccounts(userId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.UserConnectedAccount> ClientLibrary.MetrocamService.Service.EndGetUserConnectedAccounts(System.IAsyncResult result) {
            return base.Channel.EndGetUserConnectedAccounts(result);
        }
        
        private System.IAsyncResult OnBeginGetUserConnectedAccounts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginGetUserConnectedAccounts(userId, callback, asyncState);
        }
        
        private object[] OnEndGetUserConnectedAccounts(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.UserConnectedAccount> retVal = ((ClientLibrary.MetrocamService.Service)(this)).EndGetUserConnectedAccounts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserConnectedAccountsCompleted(object state) {
            if ((this.GetUserConnectedAccountsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserConnectedAccountsCompleted(this, new GetUserConnectedAccountsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserConnectedAccountsAsync(System.Guid userId) {
            this.GetUserConnectedAccountsAsync(userId, null);
        }
        
        public void GetUserConnectedAccountsAsync(System.Guid userId, object userState) {
            if ((this.onBeginGetUserConnectedAccountsDelegate == null)) {
                this.onBeginGetUserConnectedAccountsDelegate = new BeginOperationDelegate(this.OnBeginGetUserConnectedAccounts);
            }
            if ((this.onEndGetUserConnectedAccountsDelegate == null)) {
                this.onEndGetUserConnectedAccountsDelegate = new EndOperationDelegate(this.OnEndGetUserConnectedAccounts);
            }
            if ((this.onGetUserConnectedAccountsCompletedDelegate == null)) {
                this.onGetUserConnectedAccountsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserConnectedAccountsCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserConnectedAccountsDelegate, new object[] {
                        userId}, this.onEndGetUserConnectedAccountsDelegate, this.onGetUserConnectedAccountsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult ClientLibrary.MetrocamService.Service.BeginDeleteUserConnectedAccount(System.Guid userId, string accountName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUserConnectedAccount(userId, accountName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void ClientLibrary.MetrocamService.Service.EndDeleteUserConnectedAccount(System.IAsyncResult result) {
            base.Channel.EndDeleteUserConnectedAccount(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUserConnectedAccount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.Guid userId = ((System.Guid)(inValues[0]));
            string accountName = ((string)(inValues[1]));
            return ((ClientLibrary.MetrocamService.Service)(this)).BeginDeleteUserConnectedAccount(userId, accountName, callback, asyncState);
        }
        
        private object[] OnEndDeleteUserConnectedAccount(System.IAsyncResult result) {
            ((ClientLibrary.MetrocamService.Service)(this)).EndDeleteUserConnectedAccount(result);
            return null;
        }
        
        private void OnDeleteUserConnectedAccountCompleted(object state) {
            if ((this.DeleteUserConnectedAccountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserConnectedAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserConnectedAccountAsync(System.Guid userId, string accountName) {
            this.DeleteUserConnectedAccountAsync(userId, accountName, null);
        }
        
        public void DeleteUserConnectedAccountAsync(System.Guid userId, string accountName, object userState) {
            if ((this.onBeginDeleteUserConnectedAccountDelegate == null)) {
                this.onBeginDeleteUserConnectedAccountDelegate = new BeginOperationDelegate(this.OnBeginDeleteUserConnectedAccount);
            }
            if ((this.onEndDeleteUserConnectedAccountDelegate == null)) {
                this.onEndDeleteUserConnectedAccountDelegate = new EndOperationDelegate(this.OnEndDeleteUserConnectedAccount);
            }
            if ((this.onDeleteUserConnectedAccountCompletedDelegate == null)) {
                this.onDeleteUserConnectedAccountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserConnectedAccountCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserConnectedAccountDelegate, new object[] {
                        userId,
                        accountName}, this.onEndDeleteUserConnectedAccountDelegate, this.onDeleteUserConnectedAccountCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override ClientLibrary.MetrocamService.Service CreateChannel() {
            return new ServiceClientChannel(this);
        }
        
        private class ServiceClientChannel : ChannelBase<ClientLibrary.MetrocamService.Service>, ClientLibrary.MetrocamService.Service {
            
            public ServiceClientChannel(System.ServiceModel.ClientBase<ClientLibrary.MetrocamService.Service> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginCreateFavoritedPicture(ClientLibrary.MetrocamService.FavoritedPicture data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = data;
                System.IAsyncResult _result = base.BeginInvoke("CreateFavoritedPicture", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreateFavoritedPicture(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreateFavoritedPicture", _args, result);
            }
            
            public System.IAsyncResult BeginGetFavoritedPictures(System.Guid userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetFavoritedPictures", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FavoritedPicture> EndGetFavoritedPictures(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FavoritedPicture> _result = ((System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FavoritedPicture>)(base.EndInvoke("GetFavoritedPictures", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFavoritedPicture(System.Guid userId, System.Guid pictureId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = pictureId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFavoritedPicture", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteFavoritedPicture(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteFavoritedPicture", _args, result);
            }
            
            public System.IAsyncResult BeginCreateFlaggedPicture(ClientLibrary.MetrocamService.FlaggedPicture data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = data;
                System.IAsyncResult _result = base.BeginInvoke("CreateFlaggedPicture", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreateFlaggedPicture(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreateFlaggedPicture", _args, result);
            }
            
            public System.IAsyncResult BeginGetFlaggedPictures(System.Guid userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetFlaggedPictures", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FlaggedPicture> EndGetFlaggedPictures(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FlaggedPicture> _result = ((System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.FlaggedPicture>)(base.EndInvoke("GetFlaggedPictures", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteFlaggedPicture(System.Guid userId, System.Guid pictureId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = pictureId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteFlaggedPicture", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteFlaggedPicture(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteFlaggedPicture", _args, result);
            }
            
            public System.IAsyncResult BeginCreatePicture(ClientLibrary.MetrocamService.Picture data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = data;
                System.IAsyncResult _result = base.BeginInvoke("CreatePicture", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreatePicture(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreatePicture", _args, result);
            }
            
            public System.IAsyncResult BeginGetPicture(System.Guid id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetPicture", _args, callback, asyncState);
                return _result;
            }
            
            public ClientLibrary.MetrocamService.Picture EndGetPicture(System.IAsyncResult result) {
                object[] _args = new object[0];
                ClientLibrary.MetrocamService.Picture _result = ((ClientLibrary.MetrocamService.Picture)(base.EndInvoke("GetPicture", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdatePicture(ClientLibrary.MetrocamService.Picture data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = data;
                System.IAsyncResult _result = base.BeginInvoke("UpdatePicture", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdatePicture(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdatePicture", _args, result);
            }
            
            public System.IAsyncResult BeginDeletePicture(System.Guid id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("DeletePicture", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeletePicture(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeletePicture", _args, result);
            }
            
            public System.IAsyncResult BeginCreateRelationship(ClientLibrary.MetrocamService.Relationship data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = data;
                System.IAsyncResult _result = base.BeginInvoke("CreateRelationship", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreateRelationship(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreateRelationship", _args, result);
            }
            
            public System.IAsyncResult BeginGetRelationships(System.Guid userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetRelationships", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.Relationship> EndGetRelationships(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.Relationship> _result = ((System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.Relationship>)(base.EndInvoke("GetRelationships", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteRelationship(System.Guid userId, System.Guid followingUserId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = followingUserId;
                System.IAsyncResult _result = base.BeginInvoke("DeleteRelationship", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteRelationship(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteRelationship", _args, result);
            }
            
            public System.IAsyncResult BeginCreateUser(ClientLibrary.MetrocamService.User data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = data;
                System.IAsyncResult _result = base.BeginInvoke("CreateUser", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreateUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreateUser", _args, result);
            }
            
            public System.IAsyncResult BeginGetUser(System.Guid id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("GetUser", _args, callback, asyncState);
                return _result;
            }
            
            public ClientLibrary.MetrocamService.User EndGetUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                ClientLibrary.MetrocamService.User _result = ((ClientLibrary.MetrocamService.User)(base.EndInvoke("GetUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateUser(ClientLibrary.MetrocamService.User data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = data;
                System.IAsyncResult _result = base.BeginInvoke("UpdateUser", _args, callback, asyncState);
                return _result;
            }
            
            public void EndUpdateUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("UpdateUser", _args, result);
            }
            
            public System.IAsyncResult BeginDeleteUser(System.Guid id, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = id;
                System.IAsyncResult _result = base.BeginInvoke("DeleteUser", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteUser", _args, result);
            }
            
            public System.IAsyncResult BeginCreateUserConnectedAccount(ClientLibrary.MetrocamService.UserConnectedAccount data, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = data;
                System.IAsyncResult _result = base.BeginInvoke("CreateUserConnectedAccount", _args, callback, asyncState);
                return _result;
            }
            
            public void EndCreateUserConnectedAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("CreateUserConnectedAccount", _args, result);
            }
            
            public System.IAsyncResult BeginGetUserConnectedAccounts(System.Guid userId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userId;
                System.IAsyncResult _result = base.BeginInvoke("GetUserConnectedAccounts", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.UserConnectedAccount> EndGetUserConnectedAccounts(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.UserConnectedAccount> _result = ((System.Collections.ObjectModel.ObservableCollection<ClientLibrary.MetrocamService.UserConnectedAccount>)(base.EndInvoke("GetUserConnectedAccounts", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteUserConnectedAccount(System.Guid userId, string accountName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userId;
                _args[1] = accountName;
                System.IAsyncResult _result = base.BeginInvoke("DeleteUserConnectedAccount", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDeleteUserConnectedAccount(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("DeleteUserConnectedAccount", _args, result);
            }
        }
    }
}
